{"version":3,"file":"src-components-ExternalDocument-ExternalDocument-stories.4ba039c7.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA","sources":["webpack://@osuresearch/annotator/./src/components/ExternalDocument/NoteAnchor.tsx"],"sourcesContent":["import React, { SyntheticEvent, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled from 'styled-components';\nimport { getHotkeyHandler } from '@mantine/hooks';\nimport { useFrame } from 'react-frame-component';\n\nimport { useThreads } from '../../hooks/useThreads';\nimport { useAnnotationFocus } from '../../hooks/useAnnotationFocus';\nimport { useElementPosition } from '../../hooks/useElementPosition';\nimport { useAnchorsContext } from '../../hooks/useAnchorsContext';\nimport { Anchor } from '../../types';\n\n// This is living as a styled component but will probably\n// be migrated to static CSS later in ExternalDocument.tsx.\n// I don't really care for the styled-components lock-in.\nconst NotesButton = styled.button`\n  border-radius: 3px;\n  background: white;\n  color: black;\n  border: 1px solid grey;\n  border-radius: 0;\n  padding: 4px;\n  margin: 4px;\n\n  z-index: 999;\n\n  // TODO: Deal with positioning. I can't guarantee a parent isn't\n  // a relative position or not. I'd *like* these to be document-absolute,\n  // but that means they can't be children of the target in the DOM.\n  position: absolute;\n  right: 0;\n  display: none;\n\n  &:hover {\n    background: grey;\n    cursor: pointer;\n  }\n\n  /* &[data-selected] {\n    background: yellow;\n  } */\n\n  &[data-focused] {\n    background: yellow;\n  }\n\n  &[data-threads] {\n    display: block;\n  }\n`;\n\nfunction NoteAnchorImpl({ anchor, el }: { anchor: Anchor; el: HTMLElement }) {\n  const { threads, isFocused, create, focusNext } = useThreads(anchor.source);\n\n  // Update the annotation actions widget when we focus this field\n  useAnnotationFocus(anchor.source, 'note', el);\n\n  // Except there's no concept of anchors here. Fuck I need a new name for that.\n\n  // Add hotkey support for the anchor\n  useEffect(() => {\n    const handler = getHotkeyHandler([\n      [\n        'mod+alt+M',\n        () => {\n          create('commenting', {\n            type: 'FragmentSelector',\n            value: '', // TODO: Copy value into here for context\n          });\n        }\n      ]\n\n      // TODO: Hotkey to focus first comment?\n    ]);\n\n    el.addEventListener('keydown', handler);\n    return () => el.removeEventListener('keydown', handler);\n  }, [el, create]);\n\n  const focusThreads = (e: SyntheticEvent<HTMLButtonElement>) => {\n    focusNext();\n    e.preventDefault();\n  };\n\n  return createPortal(\n    <NotesButton\n      onClick={focusThreads}\n      // data-selected={isAnnoFocused ? 'true' : undefined}\n      data-focused={isFocused ? 'true' : undefined}\n      data-threads={threads.length > 0 ? threads.length : undefined}\n    >\n      📝 {threads.length}\n    </NotesButton>,\n    el\n  );\n}\n\nexport function NoteAnchor(anchor: Anchor) {\n  const { document } = useFrame();\n  const target = useRef(document?.getElementById(anchor.source)).current;\n\n  const { addAnchors } = useAnchorsContext();\n\n  const position = useElementPosition(target ?? undefined);\n\n  useEffect(() => {\n    addAnchors([\n      {\n        ...anchor,\n        target: position,\n      }\n    ]);\n  }, [anchor, position]);\n\n  if (!target) return null;\n\n  return <NoteAnchorImpl anchor={anchor} el={target} />;\n}\n"],"names":[],"sourceRoot":""}