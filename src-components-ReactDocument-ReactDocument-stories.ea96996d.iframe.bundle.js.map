{"version":3,"file":"src-components-ReactDocument-ReactDocument-stories.ea96996d.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AA+BA","sources":["webpack://@osuresearch/annotator/./src/components/ReactDocument/NoteAnchor.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, memo } from 'react';\nimport { useAnchorsContext, useAnnotationFocus, useAnnotationPicker } from '../../hooks';\nimport { useElementPosition } from '../../hooks/useElementPosition';\nimport { getDocumentPosition } from '../../utils';\nimport { Rect } from '../../types';\nimport { Chip, cx } from '@osuresearch/ui';\nimport { useThreads } from '../../hooks/useThreads';\nimport styled from 'styled-components';\n\nexport type NoteAnchorProps = {\n  id: string\n  children: React.ReactNode\n}\n\nconst Root = styled.div`\n  position: inline-block;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #fff5e3;\n  }\n\n  &.selected {\n    background-color: #fff5e3;\n  }\n\n  &.focused {\n    background-color: #fff5e3;\n  }\n`;\n\nfunction _NoteAnchor({ id, children }: NoteAnchorProps) {\n  const targetRef = useRef<HTMLDivElement>(null);\n  const [rect, setRect] = useState<Rect>({ x: -1, y: 0, width: 0, height: 0 });\n\n  const { addAnchors, removeAnchor, ref } = useAnchorsContext();\n\n  // NoteAnchorImpl things\n  const { isFocused } = useThreads(id);\n\n  const { selected, select } = useAnnotationPicker();\n\n  // Update the annotation actions widget when we focus this field\n  // useAnnotationFocus('note_src', 'note', targetRef.current);\n  // Doesn't work, cuz null...\n\n  const onFocus = (e: React.FocusEvent) => {\n    const position = getDocumentPosition(e.target as HTMLElement, ref.current as HTMLElement);\n    select({\n      targetField: id,\n      type: 'note',\n      top: position.top\n    });\n  };\n\n  const onBlur = () => {\n    if (selected?.targetField === id) {\n      select(undefined);\n    }\n  };\n\n\n  // Position monitoring and anchor target updates\n  useEffect(() => {\n    let prev = rect;\n\n    function updatePosition() {\n      if (!targetRef.current) return;\n\n      const position = getDocumentPosition(targetRef.current, ref.current as HTMLElement);\n      const r: Rect = {\n        x: Math.round(position.left),\n        y: Math.round(position.top),\n        width: Math.round(targetRef.current.clientWidth),\n        height: Math.round(targetRef.current.clientHeight),\n      }\n\n      if (r.x !== prev.x || r.y !== prev.y || r.width !== prev.width || r.height !== prev.height) {\n        prev = r;\n        setRect(r);\n\n        // Update anchor target(s)\n        addAnchors([\n          {\n            id: id,\n            type: 'note',\n            source: id,\n            target: r,\n          }\n        ])\n      }\n    }\n\n    // TODO: No.\n    const handle = setInterval(updatePosition, 300);\n\n    return () => clearInterval(handle);\n  }, [targetRef]);\n\n  // Remove the anchor from the track list on unmount\n  useEffect(() => () => removeAnchor(id), []);\n\n  const isSelected = selected?.targetField === id;\n\n  return (\n    <Root ref={targetRef} id=\"foo\"\n      tabIndex={0}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      className={cx(\n        { 'selected' : isSelected },\n        { 'focused': isFocused },\n      )}\n    >\n      {/* <Chip>\n        {rect.x}, {rect.y}\n        {isSelected ? ' selected' : ''}\n      </Chip> */}\n\n      {/* <div style={{\n        position: 'absolute',\n        width: 3000,\n        height: 1,\n        backgroundColor: 'green',\n        top: rect.y,\n        left: 0,\n        marginLeft: -1000,\n        zIndex: 9999,\n      }} /> */}\n\n      {children}\n    </Root>\n  );\n}\n\nexport const NoteAnchor = memo(_NoteAnchor);\n"],"names":[],"sourceRoot":""}