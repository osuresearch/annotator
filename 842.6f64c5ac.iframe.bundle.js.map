{"version":3,"file":"842.6f64c5ac.iframe.bundle.js","mappings":";;;;;;;;;;AAqCA;;;ACpBA;;ACUA","sources":["webpack://@osuresearch/annotator/./src/components/Thread/EditableMessage.tsx","webpack://@osuresearch/annotator/./src/components/Thread/StartReply.tsx","webpack://@osuresearch/annotator/./src/components/AnchoredContainer/AnchoredContainer.tsx"],"sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport { Button, Group, Stack, Text } from '@osuresearch/ui';\nimport { FocusScope, useFocusWithin } from 'react-aria';\nimport { EditorContent, useEditor } from '@tiptap/react';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport StarterKit from '@tiptap/starter-kit';\nimport { getHotkeyHandler } from '@mantine/hooks';\nimport styled from 'styled-components';\nimport { Context as EditorsContext } from '../../hooks/useEditors';\n\nexport type EditableMessageProps = {\n  defaultValue: string;\n  placeholder?: string;\n  autosave?: boolean;\n  onSave: (value: string) => void;\n  onCancel: () => void;\n};\n\nconst EditorStyles = styled.div`\n\n  .ProseMirror {\n    border: 1px solid var(--rui-light);\n    padding: var(--rui-spacing-xs);\n  }\n  .ProseMirror-focused {\n    outline: none;\n    border: 1px solid var(--rui-light);\n  }\n`;\n\n/**\n * Rich text editor with a save/cancel button visible on mount.\n *\n * a11y\n * - Focuses on the text input on mount\n * - Traps keyboard focus until closed\n */\nexport function EditableMessage({\n  defaultValue,\n  placeholder,\n  autosave = false,\n  onSave,\n  onCancel\n}: EditableMessageProps) {\n  const { setActiveEditor } = useContext(EditorsContext);\n\n  const { focusWithinProps } = useFocusWithin({\n    onBlurWithin: (e) => {\n      // if (autosave) {\n      //   handleSave();\n      // } else {\n      //   handleCancel();\n      // }\n    }\n  });\n\n  const editor = useEditor(\n    {\n      content: defaultValue,\n      extensions: [\n        StarterKit,\n        Placeholder.configure({\n          placeholder\n        })\n      ]\n    },\n    []\n  );\n\n  const handleSave = () => {\n    if (!editor) {\n      return;\n    }\n\n    const textContent = editor.getText();\n    const content = editor.getHTML();\n\n    editor.chain().clearContent().blur().run();\n\n    setActiveEditor(false);\n    if (textContent.length > 0) {\n      onSave(content);\n    }\n    else {\n      onCancel();\n    }\n  };\n\n  const handleCancel = () => {\n    if (!editor) {\n      return;\n    }\n\n    editor.chain().clearContent().blur().run();\n\n    setActiveEditor(false);\n    onCancel();\n  };\n\n  useEffect(() => {\n    if (editor) {\n      editor.commands.focus('end');\n    }\n\n    setActiveEditor(true);\n\n    return () => setActiveEditor(false);\n  }, [editor]);\n\n  return (\n    <Stack align=\"stretch\" fs=\"sm\">\n      <EditorStyles>\n        <EditorContent\n          editor={editor}\n          onKeyDown={getHotkeyHandler([['mod+Enter', handleSave]])}\n        />\n      </EditorStyles>\n\n      <Group justify=\"end\" align=\"center\">\n        <Text fs=\"xs\" c=\"dark\">Tip: Press Ctrl+Enter to save.</Text>\n        <Button variant=\"subtle\" onPress={handleCancel}>Cancel</Button>\n        <Button onPress={handleSave}>Save</Button>\n      </Group>\n    </Stack>\n  );\n}\n","import React, { useState, useContext } from 'react';\nimport { Group, Stack, UnstyledButton } from '@osuresearch/ui';\nimport styled from 'styled-components';\nimport { useThread } from '../../hooks/useThread';\nimport { Context as EditorsContext } from '../../hooks/useEditors';\nimport { EditableMessage } from './EditableMessage';\nimport { Annotation } from '../../types';\n\nexport type StartReplyProps = {\n  thread: Annotation;\n};\n\nconst Root = styled.div`\n  border: 1px solid var(--rui-light);\n  padding: var(--rui-spacing-xs);\n`;\n\nexport function StartReply({ thread }: StartReplyProps) {\n  const { hasActiveEditor } = useContext(EditorsContext);\n  const [active, setActive] = useState(false);\n  const { addReply } = useThread(thread.id);\n\n  const onSave = (message: string) => {\n    addReply(message);\n    setActive(false);\n  };\n\n  const onCancel = () => {\n    setActive(false);\n  }\n\n  const onReply = () => {\n    setActive(true);\n  }\n\n  return (\n    <Stack align=\"stretch\" fs=\"sm\">\n      {!active && (\n        <UnstyledButton isDisabled={hasActiveEditor} as={Root} onPress={onReply} c=\"dark\">\n          <Group>\n            {hasActiveEditor\n              ? 'Another comment is in progress.'\n              : 'Reply'\n            }</Group>\n        </UnstyledButton>\n      )}\n\n      {active && (\n        <EditableMessage\n          placeholder=\"Reply\"\n          onSave={onSave}\n          onCancel={onCancel}\n          defaultValue=\"\"\n        />\n      )}\n    </Stack>\n  );\n}\n","import React, { memo, useContext, useEffect } from \"react\";\nimport { useElementSize } from \"../../hooks/useElementSize\";\nimport { Context as CellListContext } from '../../hooks/useCellList';\nimport styled from \"styled-components\";\nimport { useCellListItem } from \"../../hooks/useCellListItem\";\nimport { IconButton } from \"@osuresearch/ui\";\nimport { Anchor } from '../../types';\n\nexport type AnchoredContainerProps = {\n  id: string\n  anchor?: Anchor\n  focused: boolean\n  children: React.ReactNode\n\n  /**\n   * Additional spacing between adjacent containers\n   */\n  gap: number;\n}\n\nconst AnimatedContainer = styled.div`\n  transition: 200ms;\n`;\n\n/**\n * Responsible for keeping body content aligned with a target anchor.\n */\nexport function AnchoredContainer({ id, anchor, focused, gap, children }: AnchoredContainerProps) {\n  const anchorPos = anchor?.target || { y: 0, x: 0, width: 0, height: 0 };\n\n  const { ref, height } = useElementSize();\n  const heightWithGap = height + gap;\n\n  const { item, update, focus } = useCellListItem(id, anchorPos.y);\n\n  useEffect(() => {\n    if (!item) {\n      return;\n    }\n\n    const updated = {...item};\n\n    if (heightWithGap !== item.height) {\n      updated.height = heightWithGap;\n      update(updated);\n    }\n\n    if (focused) {\n      focus();\n    }\n  }, [item, id, anchorPos, heightWithGap, focused]);\n\n  return (\n    <>\n    <IconButton size={20} label=\"Icon here\" name=\"comment\" style={{\n      position: 'absolute',\n      transform: `translateY(${item?.anchorCell ?? 0}px) translateX(-48px)`\n    }} />\n\n    <AnimatedContainer ref={ref} style={{\n      position: 'absolute',\n      transform: item?.cell\n        ? `translateY(${item?.cell ?? 0}px) translateX(${focused ? -12 :0}px)`\n        : undefined,\n    }}>\n      {children}\n    </AnimatedContainer>\n    </>\n  );\n}\n"],"names":[],"sourceRoot":""}